name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Testes e Build
  test-and-build:
    name: 🧪 Test & Build
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: 📋 Install dependencies
      run: |
        if [ -f package.json ]; then
          npm ci
        else
          echo "No package.json found, skipping npm install"
        fi

    - name: 🧪 Run tests
      run: |
        if [ -f package.json ] && npm run test --if-present; then
          echo "Tests completed"
        else
          echo "No tests found, skipping"
        fi

    - name: 🏗️ Build application
      run: |
        if [ -f package.json ] && npm run build --if-present; then
          echo "Build completed"
        else
          echo "No build script found, using static files"
          mkdir -p dist
          cp -r src/* dist/ 2>/dev/null || cp *.html dist/ 2>/dev/null || echo "No files to copy"
        fi

    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          dist/
          src/
          *.html
          *.css
          *.js
        retention-days: 30

  # Job 2: Docker Build e Push
  docker:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./docker/
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  # Job 3: Deploy to GitHub Pages
  deploy-pages:
    name: 🌐 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: ./public

    - name: 📄 Setup Pages
      uses: actions/configure-pages@v5

    - name: 📤 Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./public

    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Job 4: Deploy to Kubernetes (opcional)
  deploy-k8s:
    name: ⚓ Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [test-and-build, docker]
    if: github.ref == 'refs/heads/main' && vars.ENABLE_K8S_DEPLOY == 'true'
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: ⚓ Setup kubectl
      uses: azure/setup-kubectl@v4

    - name: 🔐 Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: 🔄 Update Kubernetes manifests
      run: |
        sed -i "s/IMAGE_TAG/${{ github.sha }}/g" k8s/deployment.yml
        sed -i "s/DOMAIN_NAME/${{ vars.DOMAIN_NAME }}/g" k8s/ingress.yml

    - name: 🚀 Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/
        kubectl rollout status deployment/gitops-app -n gitops

  # Job 5: Notificações
  notify:
    name: 📢 Notify Deploy Status
    runs-on: ubuntu-latest
    needs: [deploy-pages]
    if: always()
    steps:
    - name: 💬 Notify Success
      if: ${{ needs.deploy-pages.result == 'success' }}
      run: |
        echo "✅ Deploy completed successfully!"
        echo "🌐 Site URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"

    - name: ❌ Notify Failure
      if: ${{ needs.deploy-pages.result == 'failure' }}
      run: |
        echo "❌ Deploy failed!"
        exit 1